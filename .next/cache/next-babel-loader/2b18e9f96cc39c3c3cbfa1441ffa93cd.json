{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var COUNTER_ME = 'COUNTER_ME';\nvar INITIAL_STATE = {\n  counterVal: 0\n};\n\nvar Counter = function Counter() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case COUNTER_ME:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        counterVal: payload\n      });\n\n    default:\n      return state;\n  }\n};\n\n_c = Counter;\nexport function CounterReset(payload) {\n  return {\n    type: COUNTER_ME,\n    payload: payload\n  };\n}\n_c2 = CounterReset;\nexport function incrementCounter(payload) {\n  return {\n    type: COUNTER_ME,\n    payload: payload + 1\n  };\n}\nexport function decrementCounter(payload) {\n  return {\n    type: COUNTER_ME,\n    payload: payload - 1\n  };\n}\nexport default Counter;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Counter\");\n$RefreshReg$(_c2, \"CounterReset\");","map":{"version":3,"sources":["/Users/muhilham/Documents/repo/getCraft/fe-test/redux/ducks/Counter.js"],"names":["COUNTER_ME","INITIAL_STATE","counterVal","Counter","state","type","payload","CounterReset","incrementCounter","decrementCounter"],"mappings":";;;;;;AAAA,OAAO,IAAMA,UAAU,GAAG,YAAnB;AAEP,IAAMC,aAAa,GAAG;AACpBC,EAAAA,UAAU,EAAE;AADQ,CAAtB;;AAIA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAA8C;AAAA,MAA7CC,KAA6C,uEAArCH,aAAqC;;AAAA;AAAA,MAApBI,IAAoB,QAApBA,IAAoB;AAAA,MAAdC,OAAc,QAAdA,OAAc;;AAC5D,UAAQD,IAAR;AACA,SAAKL,UAAL;AACE,6CACKI,KADL;AAEEF,QAAAA,UAAU,EAAEI;AAFd;;AAKF;AACE,aAAOF,KAAP;AARF;AAUD,CAXD;;KAAMD,O;AAaN,OAAO,SAASI,YAAT,CAAsBD,OAAtB,EAA+B;AACpC,SAAO;AACLD,IAAAA,IAAI,EAAEL,UADD;AAELM,IAAAA,OAAO,EAAPA;AAFK,GAAP;AAID;MALeC,Y;AAOhB,OAAO,SAASC,gBAAT,CAA0BF,OAA1B,EAAmC;AACxC,SAAO;AACLD,IAAAA,IAAI,EAAEL,UADD;AAELM,IAAAA,OAAO,EAAEA,OAAO,GAAG;AAFd,GAAP;AAID;AAED,OAAO,SAASG,gBAAT,CAA0BH,OAA1B,EAAmC;AACxC,SAAO;AACLD,IAAAA,IAAI,EAAEL,UADD;AAELM,IAAAA,OAAO,EAAEA,OAAO,GAAG;AAFd,GAAP;AAID;AAED,eAAeH,OAAf","sourcesContent":["export const COUNTER_ME = 'COUNTER_ME'\n\nconst INITIAL_STATE = {\n  counterVal: 0,\n}\n\nconst Counter = (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n  case COUNTER_ME:\n    return {\n      ...state,\n      counterVal: payload,\n    }\n\n  default:\n    return state\n  }\n}\n\nexport function CounterReset(payload) {\n  return {\n    type: COUNTER_ME,\n    payload,\n  }\n}\n\nexport function incrementCounter(payload) {\n  return {\n    type: COUNTER_ME,\n    payload: payload + 1,\n  }\n}\n\nexport function decrementCounter(payload) {\n  return {\n    type: COUNTER_ME,\n    payload: payload - 1,\n  }\n}\n\nexport default Counter\n"]},"metadata":{},"sourceType":"module"}