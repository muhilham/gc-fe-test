{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const COUNTER_ME = 'COUNTER_ME';\nconst INITIAL_STATE = {\n  counterVal: 0\n};\n\nconst Counter = (state = INITIAL_STATE, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case COUNTER_ME:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        counterVal: payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport function CounterReset(payload) {\n  return {\n    type: COUNTER_ME,\n    payload\n  };\n}\nexport function incrementCounter(payload) {\n  return {\n    type: COUNTER_ME,\n    payload: payload + 1\n  };\n}\nexport function decrementCounter(payload) {\n  return {\n    type: COUNTER_ME,\n    payload: payload - 1\n  };\n}\nexport default Counter;","map":{"version":3,"sources":["/Users/muhilham/Documents/repo/getCraft/fe-test/redux/ducks/Counter.js"],"names":["COUNTER_ME","INITIAL_STATE","counterVal","Counter","state","type","payload","CounterReset","incrementCounter","decrementCounter"],"mappings":";;;;;;AAAA,OAAO,MAAMA,UAAU,GAAG,YAAnB;AAEP,MAAMC,aAAa,GAAG;AACpBC,EAAAA,UAAU,EAAE;AADQ,CAAtB;;AAIA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGH,aAAT,EAAwB;AAAEI,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAxB,KAA8C;AAC5D,UAAQD,IAAR;AACA,SAAKL,UAAL;AACE,6CACKI,KADL;AAEEF,QAAAA,UAAU,EAAEI;AAFd;;AAKF;AACE,aAAOF,KAAP;AARF;AAUD,CAXD;;AAaA,OAAO,SAASG,YAAT,CAAsBD,OAAtB,EAA+B;AACpC,SAAO;AACLD,IAAAA,IAAI,EAAEL,UADD;AAELM,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASE,gBAAT,CAA0BF,OAA1B,EAAmC;AACxC,SAAO;AACLD,IAAAA,IAAI,EAAEL,UADD;AAELM,IAAAA,OAAO,EAAEA,OAAO,GAAG;AAFd,GAAP;AAID;AAED,OAAO,SAASG,gBAAT,CAA0BH,OAA1B,EAAmC;AACxC,SAAO;AACLD,IAAAA,IAAI,EAAEL,UADD;AAELM,IAAAA,OAAO,EAAEA,OAAO,GAAG;AAFd,GAAP;AAID;AAED,eAAeH,OAAf","sourcesContent":["export const COUNTER_ME = 'COUNTER_ME'\n\nconst INITIAL_STATE = {\n  counterVal: 0,\n}\n\nconst Counter = (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n  case COUNTER_ME:\n    return {\n      ...state,\n      counterVal: payload,\n    }\n\n  default:\n    return state\n  }\n}\n\nexport function CounterReset(payload) {\n  return {\n    type: COUNTER_ME,\n    payload,\n  }\n}\n\nexport function incrementCounter(payload) {\n  return {\n    type: COUNTER_ME,\n    payload: payload + 1,\n  }\n}\n\nexport function decrementCounter(payload) {\n  return {\n    type: COUNTER_ME,\n    payload: payload - 1,\n  }\n}\n\nexport default Counter\n"]},"metadata":{},"sourceType":"module"}