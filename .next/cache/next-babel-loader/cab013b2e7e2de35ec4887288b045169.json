{"ast":null,"code":"import thunkMiddleware from 'redux-thunk';\nimport { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { createWrapper } from 'next-redux-wrapper';\nimport rootReducers from \"./root/reducers\";\nexport default function initStore(initialState) {\n  const logger = createLogger({\n    collapsed: true\n  });\n  const middlewares = (process && process.env && process.env.NODE_ENV || \"development\") !== 'production' ? [thunkMiddleware, logger] : [thunkMiddleware];\n  const store = createStore(rootReducers, initialState, applyMiddleware(...middlewares));\n  return store;\n} // export an assembled wrapper\n\nexport const wrapper = createWrapper(() => initStore(), {\n  debug: true\n});","map":{"version":3,"sources":["/Users/muhilham/Documents/repo/getCraft/fe-test/redux/index.js"],"names":["thunkMiddleware","createStore","applyMiddleware","createLogger","createWrapper","rootReducers","initStore","initialState","logger","collapsed","middlewares","store","wrapper","debug"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,aAA5B;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,aAAT,QAA8B,oBAA9B;AAEA,OAAOC,YAAP;AAEA,eAAe,SAASC,SAAT,CAAmBC,YAAnB,EAAiC;AAC9C,QAAMC,MAAM,GAAGL,YAAY,CAAC;AAAEM,IAAAA,SAAS,EAAE;AAAb,GAAD,CAA3B;AAEA,QAAMC,WAAW,GAAG,sEAAyB,YAAzB,GAChB,CAACV,eAAD,EAAkBQ,MAAlB,CADgB,GAEhB,CAACR,eAAD,CAFJ;AAIA,QAAMW,KAAK,GAAGV,WAAW,CACvBI,YADuB,EAEvBE,YAFuB,EAGvBL,eAAe,CAAC,GAAGQ,WAAJ,CAHQ,CAAzB;AAMA,SAAOC,KAAP;AACD,C,CAED;;AACA,OAAO,MAAMC,OAAO,GAAGR,aAAa,CAAC,MAAME,SAAS,EAAhB,EAAoB;AAAEO,EAAAA,KAAK,EAAE;AAAT,CAApB,CAA7B","sourcesContent":["import thunkMiddleware from 'redux-thunk'\nimport { createStore, applyMiddleware } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport { createWrapper } from 'next-redux-wrapper'\n\nimport rootReducers from './root/reducers'\n\nexport default function initStore(initialState) {\n  const logger = createLogger({ collapsed: true })\n\n  const middlewares = process.env.NODE_ENV !== 'production'\n    ? [thunkMiddleware, logger]\n    : [thunkMiddleware]\n\n  const store = createStore(\n    rootReducers,\n    initialState,\n    applyMiddleware(...middlewares),\n  )\n\n  return store\n}\n\n// export an assembled wrapper\nexport const wrapper = createWrapper(() => initStore(), { debug: true })\n"]},"metadata":{},"sourceType":"module"}